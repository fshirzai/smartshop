{"ast":null,"code":"var _jsxFileName = \"/data/data/com.termux/files/home/fsprojects/myapp/src/contexts/AuthContext.jsx\",\n  _s = $RefreshSig$();\nimport { createContext, useState, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { authAPI } from '../api/authAPI';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n\n  /* ---------- bootstrap user ---------- */\n  useEffect(() => {\n    (async () => {\n      const token = localStorage.getItem('token');\n      if (!token) return setLoading(false);\n      try {\n        const {\n          data\n        } = await authAPI.refresh(); // GET /auth/refresh\n        setUser(data);\n        localStorage.setItem('token', data.token);\n      } catch {\n        localStorage.removeItem('token');\n      } finally {\n        setLoading(false);\n      }\n    })();\n  }, []);\n\n  /* ---------- actions ---------- */\n  const login = useCallback(async credentials => {\n    const {\n      data\n    } = await authAPI.login(credentials);\n    localStorage.setItem('token', data.token);\n    setUser(data.user);\n    navigate('/');\n  }, [navigate]);\n  const logout = useCallback(() => {\n    localStorage.removeItem('token');\n    setUser(null);\n    navigate('/login');\n  }, [navigate]);\n  const value = {\n    user,\n    login,\n    logout,\n    setUser,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 10\n  }, this);\n};\n_s(AuthProvider, \"hTERzyOgOAJb4vIml8rzSKRzurc=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nAuthProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useState","useEffect","useCallback","PropTypes","authAPI","useNavigate","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","navigate","token","localStorage","getItem","data","refresh","setItem","removeItem","login","credentials","logout","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","propTypes","node","isRequired","$RefreshReg$"],"sources":["/data/data/com.termux/files/home/fsprojects/myapp/src/contexts/AuthContext.jsx"],"sourcesContent":["import { createContext, useState, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { authAPI } from '../api/authAPI';\nimport { useNavigate } from 'react-router-dom';\n\nexport const AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n\n  /* ---------- bootstrap user ---------- */\n  useEffect(() => {\n    (async () => {\n      const token = localStorage.getItem('token');\n      if (!token) return setLoading(false);\n      try {\n        const { data } = await authAPI.refresh(); // GET /auth/refresh\n        setUser(data);\n        localStorage.setItem('token', data.token);\n      } catch {\n        localStorage.removeItem('token');\n      } finally {\n        setLoading(false);\n      }\n    })();\n  }, []);\n\n  /* ---------- actions ---------- */\n  const login = useCallback(async (credentials) => {\n    const { data } = await authAPI.login(credentials);\n    localStorage.setItem('token', data.token);\n    setUser(data.user);\n    navigate('/');\n  }, [navigate]);\n\n  const logout = useCallback(() => {\n    localStorage.removeItem('token');\n    setUser(null);\n    navigate('/login');\n  }, [navigate]);\n\n  const value = { user, login, logout, setUser, loading };\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n\nAuthProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AACvE,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,OAAO,QAAQ,gBAAgB;AACxC,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,OAAO,MAAMC,WAAW,gBAAGT,aAAa,CAAC,CAAC;AAE1C,OAAO,MAAMU,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAMgB,QAAQ,GAAGX,WAAW,CAAC,CAAC;;EAE9B;EACAJ,SAAS,CAAC,MAAM;IACd,CAAC,YAAY;MACX,MAAMgB,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,IAAI,CAACF,KAAK,EAAE,OAAOF,UAAU,CAAC,KAAK,CAAC;MACpC,IAAI;QACF,MAAM;UAAEK;QAAK,CAAC,GAAG,MAAMhB,OAAO,CAACiB,OAAO,CAAC,CAAC,CAAC,CAAC;QAC1CR,OAAO,CAACO,IAAI,CAAC;QACbF,YAAY,CAACI,OAAO,CAAC,OAAO,EAAEF,IAAI,CAACH,KAAK,CAAC;MAC3C,CAAC,CAAC,MAAM;QACNC,YAAY,CAACK,UAAU,CAAC,OAAO,CAAC;MAClC,CAAC,SAAS;QACRR,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC,EAAE,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMS,KAAK,GAAGtB,WAAW,CAAC,MAAOuB,WAAW,IAAK;IAC/C,MAAM;MAAEL;IAAK,CAAC,GAAG,MAAMhB,OAAO,CAACoB,KAAK,CAACC,WAAW,CAAC;IACjDP,YAAY,CAACI,OAAO,CAAC,OAAO,EAAEF,IAAI,CAACH,KAAK,CAAC;IACzCJ,OAAO,CAACO,IAAI,CAACR,IAAI,CAAC;IAClBI,QAAQ,CAAC,GAAG,CAAC;EACf,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;EAEd,MAAMU,MAAM,GAAGxB,WAAW,CAAC,MAAM;IAC/BgB,YAAY,CAACK,UAAU,CAAC,OAAO,CAAC;IAChCV,OAAO,CAAC,IAAI,CAAC;IACbG,QAAQ,CAAC,QAAQ,CAAC;EACpB,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;EAEd,MAAMW,KAAK,GAAG;IAAEf,IAAI;IAAEY,KAAK;IAAEE,MAAM;IAAEb,OAAO;IAAEC;EAAQ,CAAC;EACvD,oBAAOP,OAAA,CAACC,WAAW,CAACoB,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAjB,QAAA,EAAEA;EAAQ;IAAAmB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAuB,CAAC;AAC9E,CAAC;AAACrB,EAAA,CAtCWF,YAAY;EAAA,QAGNJ,WAAW;AAAA;AAAA4B,EAAA,GAHjBxB,YAAY;AAwCzBA,YAAY,CAACyB,SAAS,GAAG;EACvBxB,QAAQ,EAAEP,SAAS,CAACgC,IAAI,CAACC;AAC3B,CAAC;AAAC,IAAAH,EAAA;AAAAI,YAAA,CAAAJ,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}